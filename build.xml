<?xml version="1.0" encoding="UTF-8"?>
<project name="bp" default="plugin">


    <property file="build.properties"/>

    <property name="plugin.path" value="export"/>

    <!-- Uncomment the following property if no tests compilation is needed -->
    <!--
    <property name="skip.tests" value="true"/>
     -->

    <!-- Compiler options -->

    <property name="compiler.debug" value="on"/>
    <property name="compiler.generate.no.warnings" value="off"/>
    <property name="compiler.args" value=""/>
    <property name="compiler.max.memory" value="700m"/>
    <patternset id="ignored.files">
        <exclude name="**/*.hprof/**"/>
        <exclude name="**/*.pyc/**"/>
        <exclude name="**/*.pyo/**"/>
        <exclude name="**/*.rbc/**"/>
        <exclude name="**/*.yarb/**"/>
        <exclude name="**/*~/**"/>
        <exclude name="**/.DS_Store/**"/>
        <exclude name="**/.git/**"/>
        <exclude name="**/.hg/**"/>
        <exclude name="**/.svn/**"/>
        <exclude name="**/CVS/**"/>
        <exclude name="**/__pycache__/**"/>
        <exclude name="**/_svn/**"/>
        <exclude name="**/vssver.scc/**"/>
        <exclude name="**/vssver2.scc/**"/>
    </patternset>
    <patternset id="library.patterns">
        <include name="*.war"/>
        <include name="*.swc"/>
        <include name="*.zip"/>
        <include name="*.egg"/>
        <include name="*.ane"/>
        <include name="*.jar"/>
        <include name="*.ear"/>
    </patternset>
    <patternset id="compiler.resources">
        <exclude name="**/?*.java"/>
        <exclude name="**/?*.form"/>
        <exclude name="**/?*.class"/>
        <exclude name="**/?*.groovy"/>
        <exclude name="**/?*.scala"/>
        <exclude name="**/?*.flex"/>
        <exclude name="**/?*.kt"/>
        <exclude name="**/?*.clj"/>
        <exclude name="**/?*.aj"/>
    </patternset>

    <!-- JDK definitions -->

    <property name="jdk.bin.1.8" value="${jdk.home.1.8}/bin"/>
    <path id="jdk.classpath.1.8">
        <fileset dir="${jdk.home.1.8}">
            <include name="jre/lib/charsets.jar"/>
            <include name="jre/lib/deploy.jar"/>
            <include name="jre/lib/ext/cldrdata.jar"/>
            <include name="jre/lib/ext/dnsns.jar"/>
            <include name="jre/lib/ext/jaccess.jar"/>
            <include name="jre/lib/ext/jfxrt.jar"/>
            <include name="jre/lib/ext/localedata.jar"/>
            <include name="jre/lib/ext/nashorn.jar"/>
            <include name="jre/lib/ext/sunec.jar"/>
            <include name="jre/lib/ext/sunjce_provider.jar"/>
            <include name="jre/lib/ext/sunpkcs11.jar"/>
            <include name="jre/lib/ext/zipfs.jar"/>
            <include name="jre/lib/javaws.jar"/>
            <include name="jre/lib/jce.jar"/>
            <include name="jre/lib/jfr.jar"/>
            <include name="jre/lib/jfxswt.jar"/>
            <include name="jre/lib/jsse.jar"/>
            <include name="jre/lib/management-agent.jar"/>
            <include name="jre/lib/plugin.jar"/>
            <include name="jre/lib/resources.jar"/>
            <include name="jre/lib/rt.jar"/>
        </fileset>
    </path>

    <property name="project.jdk.home" value="${jdk.home.1.8}"/>
    <property name="project.jdk.bin" value="${jdk.bin.1.8}"/>
    <property name="project.jdk.classpath" value="jdk.classpath.1.8"/>


    <!-- Project Libraries -->

    <path id="libraries.base">
        <fileset dir="lib" includes="*.jar"/>
    </path>
    <path id="libraries.plugins">
        <fileset dir="plugins" includes="**/lib/*.jar"/>
    </path>
    <path id="libraries.test">
        <fileset dir="testlib" includes="*.jar"/>
    </path>

    <!-- Global Libraries -->
    <!-- Register Custom Compiler Taskdefs -->
    <property name="javac2.home" value="${idea.home}/lib"/>
    <path id="javac2.classpath">
        <pathelement location="${javac2.home}/javac2.jar"/>
        <pathelement location="${javac2.home}/jdom.jar"/>
        <pathelement location="${javac2.home}/asm-all.jar"/>
        <pathelement location="${javac2.home}/jgoodies-forms.jar"/>
    </path>
    <!-- Modules -->

    <!-- Module OpenDiabetes -->
    <dirname property="module.opendiabetes.basedir" file="${ant.file}"/>
    <property name="module.jdk.home.opendiabetes" value="${project.jdk.home}"/>
    <property name="module.jdk.bin.opendiabetes" value="${project.jdk.bin}"/>
    <property name="module.jdk.classpath.opendiabetes"
              value="${project.jdk.classpath}"/>
    <property name="compiler.args.opendiabetes"
              value="-encoding UTF-8 -source 8 -target 8 ${compiler.args}"/>
    <property name="opendiabetes.output.dir"
              value="${module.opendiabetes.basedir}/out/production/OpenDiabetes"/>
    <property name="opendiabetes.testoutput.dir"
              value="${module.opendiabetes.basedir}/out/test"/>

    <path id="opendiabetes.module.bootclasspath">
        <!-- Paths to be included in compilation bootclasspath -->
    </path>
    <!-- Classpath holding all classes for the Base and it's libraries -->
    <path id="opendiabetes.classpath.base">
        <path refid="${module.jdk.classpath.opendiabetes}"/>
        <path refid="libraries.base"/>
    </path>
    <!-- Full classpath containing all compiled classes and libraries-->
    <path id="opendiabetes.classpath.full">
        <path refid="${module.jdk.classpath.opendiabetes}"/>
        <pathelement location="${opendiabetes.output.dir}"/>
        <path refid="libraries.base"/>
        <path refid="libraries.plugins"/>
        <path refid="libraries.test"/>
    </path>

    <patternset id="excluded.from.module.opendiabetes">
        <patternset refid="ignored.files"/>
    </patternset>
    <patternset id="excluded.from.compilation.opendiabetes">
        <patternset refid="excluded.from.module.opendiabetes"/>
    </patternset>
    <!-- Full source path containing all source files and libraries -->
    <path id="opendiabetes.module.sourcepath">
        <dirset dir="${module.opendiabetes.basedir}">
            <include name="src"/>
            <include name="lib"/>
            <include name="plugins"/>
        </dirset>
    </path>
    <!-- Source path for the tests -->
    <path id="opendiabetes.module.test.sourcepath">
        <dirset dir="${module.opendiabetes.basedir}">
            <include name="test"/>
        </dirset>
    </path>
    <!-- Source path for the OpenDiabetes base -->
    <path id="opendiabetes.module.base.sourcepath">
        <dirset dir="${module.opendiabetes.basedir}">
            <include name="src"/>
            <include name="lib"/>
        </dirset>
    </path>

    <!-- Compiles all available source files, needed for plugin creation -->
    <target name="compile.opendiabetes.all"
                     description="Compile OpenDiabetes; all classes (plugins + base)">
    <mkdir dir="${opendiabetes.output.dir}"/>
    <javac destdir="${opendiabetes.output.dir}" debug="${compiler.debug}"
           nowarn="${compiler.generate.no.warnings}"
           memorymaximumsize="${compiler.max.memory}" fork="true">
        <compilerarg line="${compiler.args.opendiabetes}"/>
        <bootclasspath refid="opendiabetes.module.bootclasspath"/>
        <classpath refid="opendiabetes.classpath.full"/>
        <src refid="opendiabetes.module.sourcepath"/>
        <patternset refid="excluded.from.compilation.opendiabetes"/>
    </javac>

    <copy todir="${opendiabetes.output.dir}">
        <fileset dir="${module.opendiabetes.basedir}/src">
            <patternset refid="compiler.resources"/>
            <type type="file"/>
        </fileset>
        <fileset dir="${module.opendiabetes.basedir}/lib">
            <patternset refid="compiler.resources"/>
            <type type="file"/>
        </fileset>
    </copy>
    </target>

    <!-- Compiles the source of the OpenDiabetes base -->
    <target name="compile.opendiabetes.base"
            description="Compile base classes of OpenDiabetes">
        <delete dir="${opendiabetes.output.dir}" quiet="true"/>
        <mkdir dir="${opendiabetes.output.dir}"/>
        <javac destdir="${opendiabetes.output.dir}" debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true">
            <compilerarg line="${compiler.args.opendiabetes}"/>
            <bootclasspath refid="opendiabetes.module.bootclasspath"/>
            <classpath refid="opendiabetes.classpath.base"/>
            <src refid="opendiabetes.module.base.sourcepath"/>
            <exclude name="**/package-info.java"/>
            <patternset refid="excluded.from.compilation.opendiabetes"/>
        </javac>
        <copy todir="${opendiabetes.output.dir}">
            <fileset dir="${module.opendiabetes.basedir}/src">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <!-- Compiles the test source files -->
    <target name="compile.opendiabetes.tests"
            depends="compile.opendiabetes.all"
            description="compile module OpenDiabetes; test classes"
            unless="skip.tests">
        <mkdir dir="${opendiabetes.testoutput.dir}"/>
        <javac destdir="${opendiabetes.testoutput.dir}"
               debug="${compiler.debug}"
               nowarn="${compiler.generate.no.warnings}"
               memorymaximumsize="${compiler.max.memory}" fork="true">
            <!--executable="${module.jdk.bin.opendiabetes}/javac">-->
            <compilerarg line="${compiler.args.opendiabetes}"/>
            <bootclasspath refid="opendiabetes.module.bootclasspath"/>
            <classpath refid="opendiabetes.classpath.full"/>
            <src refid="opendiabetes.module.test.sourcepath"/>
            <patternset refid="excluded.from.compilation.opendiabetes"/>
        </javac>

        <copy todir="${opendiabetes.testoutput.dir}">
            <fileset dir="${module.opendiabetes.basedir}/test">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>

    <!-- Cleans the working directory of all compilation and build artifacts. -->
    <target name="clean" description="Cleanup">
        <delete dir="plugins_out"/>
        <delete dir="export"/>
        <delete dir="out"/>
    </target>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="lib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- Task to compile and build all available plugins -->
    <target name="plugin" depends="compile.opendiabetes.all">
        <foreach target="plugin.compile" param="att1">
            <fileset dir="plugins" casesensitive="yes">
                <include name="**/plugin.properties"/>
            </fileset>
        </foreach>

        <property name="plugin.src.base"
                  value="plugins/de/opendiabetes/vault/plugin"/>
    </target>

    <!-- Compilation and packing of a single plugin -->
    <target name="plugin.compile">
        <dirname file="${att1}" property="plugin.src.path"/>

        <property file="${plugin.src.path}/plugin.properties"/>
        <delete dir="plugins_out"/>
        <mkdir dir="plugins_out/classes"/>
        <mkdir dir="plugins_out/lib"/>
        <mkdir dir="export"/>
        <mkdir dir="plugins_out/assets"/>
        <copy todir="plugins_out/assets" quiet="true" failonerror="false">
            <fileset dir="${plugin.src.path}/assets"/>
        </copy>
        <copy todir="plugins_out/lib" quiet="true" failonerror="false">
            <fileset dir="${plugin.src.path}/lib"/>
        </copy>
        <copy todir="plugins_out" quiet="true" failonerror="false">
            <fileset dir="${plugin.src.path}">
                <include name="*.properties"/>
                <include name="help*.md"/>
            </fileset>
        </copy>
        <path id="plugin.classpath">
            <pathelement location="${opendiabetes.output.dir}"/>
            <path refid="libraries.base"/>
            <path>
                <fileset dir="${plugin.src.path}/lib" includes="*.jar" erroronmissingdir="false"/>
            </path>
        </path>
        <javac srcdir="${plugin.src.path}" destdir="plugins_out/classes"
               classpathref="plugin.classpath"/>
        <zip destfile="${plugin.path}/${plugin.id}-${plugin.version}.zip"
             basedir="plugins_out"/>
    </target>

    <tstamp>
        <format property="timestamp" pattern="yyyyMMdd-HHmmss"
                locale="de,GERMANY"/>
    </tstamp>

    <!-- Task to run Checkstyle analysis and generating a HTML report therefor-->
    <taskdef
            resource="com/puppycrawl/tools/checkstyle/ant/checkstyle-ant-task.properties"
            classpath="${basedir}/testlib/checkstyle-8.5-all.jar"/>
    <target name="checkstyle">
        <checkstyle config="reports/resources/checkstyle/sun_checks.xml"
                    failonviolation="false">
            <fileset dir="src/" includes="**/*.java"/>
            <fileset dir="plugins/de" includes="**/*.java"/>
            <formatter type="xml"
                       tofile="reports/resources/checkstyle/checkstyle_errors.xml"/>
        </checkstyle>

        <xslt in="reports/resources/checkstyle/checkstyle_errors.xml"
              out="reports/checkstyle_errors.html"
              style="reports/resources/checkstyle/checkstyle.xsl"/>
    </target>

    <!-- Task to run FindBugs analysis and generating a HTML report therefor-->
    <taskdef name="findbugs"
             classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
             classpath="${basedir}/testlib/findbugs-ant.jar"/>
    <property name="findbugs.home" value="reports/resources/findbugs"/>
    <target name="findbugs" depends="plugin">
        <findbugs home="${findbugs.home}"
                  output="html"
                  outputFile="reports/findbugs_report.html">
            <auxClasspath>
                <path refid="libraries.base"/>
                <path refid="libraries.plugins"/>
            </auxClasspath>
            <class location="${basedir}/out/production/OpenDiabetes/de"/>
        </findbugs>
    </target>

    <!-- Classpath for JUnit runner, links JARs and class files-->
    <path id="junit.class.path">
        <fileset dir="lib" includes="*.jar"/>
        <fileset dir="testlib" includes="*.jar"/>
        <pathelement path="out/production/OpenDiabetes"/>
        <pathelement path="out/test"/>
    </path>

    <property name="plugins_out" value="out/production/OpenDiabetes/de/opendiabetes/vault/plugin"/>

    <!-- Task for running all available JUnit tests and generating a HTML reports afterwards-->
    <taskdef name="junit"
             classname="org.apache.tools.ant.taskdefs.optional.junit.JUnitTask"
             classpath="${basedir}/testlib/ant-junit.jar"/>
    <target name="test" depends="plugin, compile.opendiabetes.base, compile.opendiabetes.tests">
        <mkdir dir="reports/resources/junit"/>
        <property name="junit.path" refid="junit.class.path"/>
        <junit>
            <classpath refid="junit.class.path"/>
            <formatter type="xml"/>

            <batchtest todir="reports/resources/junit">
                <fileset dir="test">
                    <include name="**/*.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="reports/resources/junit"
                     tofile="aggreageted-junitreport.xml">
            <fileset dir="reports/resources/junit">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="noframes" todir="reports/tests"/>
        </junitreport>
        <move file="reports/tests/junit-noframes.html"
              tofile="reports/tests/junit-tests.html"/>
        <delete dir="reports/resources/junit"/>
    </target>

    <!-- Target to generate all available reports with one click. Includes JUnit tests, FindBugs and Checkstyle-->
    <target name="reports" depends="test, checkstyle, findbugs"/>

    <!-- Target to generate the JavaDoc documentation-->
    <target name="doc" description="generate documentation">
        <delete dir="docs" />
        <mkdir dir="docs" />
        <javadoc destdir="docs">
            <fileset dir="${basedir}/plugins" />
            <fileset dir="${basedir}/src" />
        </javadoc>
    </target>

    <!-- Target to build the base of OpenDiabetes as a jar file-->
    <target name="build-base" depends="compile.opendiabetes.base"
            description="Build the jar containing the base for OpenDiabetes">
        <delete file="export/opendiabetes-base.jar" quiet="true"/>
        <jar destfile="export/opendiabetes-base.jar" basedir="${opendiabetes.output.dir}"/>
    </target>

</project>